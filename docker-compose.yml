version: "3.8"

services:
  zookeeper:
    image: "bitnami/zookeeper:latest"
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    image: "bitnami/kafka:latest"
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes
    depends_on:
      - zookeeper
    networks:
      - app-network

  elasticsearch:
    image: elasticsearch:8.6.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - ./docker/data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network

#  kibana:
#    image: kibana:8.6.1
#    container_name: kibana
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch
#    networks:
#      - app-network

  spring-service-postgresdb:
    image: postgres
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file: .env
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - ./docker/data/postgres/db:/var/lib/postgresql/data
    networks:
      - app-network

  delivery-service:
    restart: on-failure
    container_name: delivery-service
    image: delivery-service
    build:
      context: ./deliveryservice
    healthcheck:
      test: "curl --fail --silent localhost:8088/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_HIBERNATE_DIALECT: ${SPRING_HIBERNATE_DIALECT}
      TO_EMAIL: ${TO_EMAIL}
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_CLIENT_FETCH_REGISTRY: true
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: true
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eurekaserver:8070/eureka/
    depends_on:
      - spring-service-postgresdb
      - eurekaserver
    env_file: .env
    networks:
      - app-network

  email-service:
    restart: on-failure
    container_name: email-service
    image: email-service
    build:
      context: ./emailservice
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT: 5000
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT: 5000
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT: 5000
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_CLIENT_FETCH_REGISTRY: true
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: true
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eurekaserver:8070/eureka/
    env_file: .env
    depends_on:
      - kafka
      - elasticsearch
      - eurekaserver
    networks:
      - app-network

  user-service:
    restart: on-failure
    container_name: user-service
    image: user-service
    build:
      context: ./userservice
    healthcheck:
      test: "curl --fail --silent localhost:8092/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
      EUREKA_CLIENT_FETCH_REGISTRY: true
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: true
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eurekaserver:8070/eureka/
    depends_on:
      - eurekaserver
    env_file: .env
    networks:
      - app-network

  mongodb:
    container_name: mongodb
    image: mongo:5.0.14
    ports:
      - '27018:27017'
    volumes:
      - ./docker/data/mongo/db:/data/db
    networks:
      - app-network

  cargo-movements-service:
    image: cargo-movements-service
    restart: on-failure
    container_name: cargo-movements-service
    build:
      context: ./cargo-movements-service
    environment:
      MONGODB_URL: ${MONGODB_URL}
    depends_on:
      - mongodb
      - eurekaserver
    env_file: .env
    networks:
      - app-network

  eurekaserver:
    image: eurekaserver
    container_name: eurekaserver
    build:
      context: ./eurekaserver
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: eurekaserver
      EUREKA_INSTANCE_HOSTNAME: eurekaserver
      EUREKA_CLIENT_FETCHREGISTRY: false
      EUREKA_CLIENT_REGISTERWITHEUREKA: false
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
    networks:
      - app-network

  gatewayserver:
    image: gatewayserver
    container_name: gatewayserver
    build:
      context: ./gatewayserver
    ports:
      - "8072:8072"
    depends_on:
      - eurekaserver

    environment:
      SPRING_CLOUD_CONFIG_ENABLED: false
      SPRING_APPLICATION_NAME: gatewayserver
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: http://keycloak:8080/realms/delivery-service/protocol/openid-connect/certs
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.0
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_FEATURES: token-exchange,admin-fine-grained-authz
    command:
      - "start-dev"
    volumes:
      - ./docker/data/keycloak_data:/opt/keycloak/data
    networks:
      - app-network

  react-client-service:
    image: react-client-service
    container_name: react-client-service
    restart: on-failure
    build:
      context: ./ui-client-service
    depends_on:
      - delivery-service
      - email-service
      - cargo-movements-service
      - user-service
    ports:
      - "3000:3000"
#    environment:
#      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: http://keycloak:8080/realms/delivery-service/protocol/openid-connect/certs
#    networks:
#      - app-network

networks:
  app-network:
    driver: bridge
